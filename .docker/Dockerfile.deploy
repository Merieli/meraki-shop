# Mantendo PHP 8.4 RC conforme solicitado, mas com configurações de debugging
FROM php:8.4.9RC1-fpm-alpine3.22

ENV APP_DIR="/var/www/meraki-shop"
ENV COMPOSER_MEMORY_LIMIT=-1
ENV COMPOSER_ALLOW_SUPERUSER=1
# Configurações específicas para versão RC
ENV PHP_INI_SCAN_DIR="/usr/local/etc/php/conf.d:/usr/local/etc/php/conf.d.custom"

# --------------------------------------------------------------
# Instalação de dependências do sistema e extensões PHP
# --------------------------------------------------------------
RUN apk update && apk add --no-cache \
    supervisor \
    nginx \
    zlib-dev \
    libzip-dev \
    libpng-dev \
    libxml2-dev \
    unzip \
    postgresql-dev \
    curl \
    make \
    gnu-libiconv-dev \
    oniguruma-dev \
    shadow \
    icu-dev \
    linux-headers \
    git \
    autoconf \
    g++ \
    openssh

# Instala extensões com tratamento de erro para versão RC
RUN docker-php-ext-install mysqli pdo pdo_mysql pdo_pgsql pgsql session xml || true && \
    docker-php-ext-install zip simplexml pcntl gd fileinfo mbstring || true && \
    docker-php-ext-install opcache intl || true

# Configura o PHP para produção de forma simplificada
RUN cp "$PHP_INI_DIR/php.ini-production" "$PHP_INI_DIR/php.ini"

# Instala Composer
COPY --from=composer/composer:latest-bin /composer /usr/bin/composer

# Instala Node
COPY --from=node:22-alpine /usr/local/bin/node /usr/local/bin/
COPY --from=node:22-alpine /usr/local/lib/node_modules /usr/local/lib/node_modules
RUN ln -s /usr/local/lib/node_modules/npm/bin/npm-cli.js /usr/local/bin/npm && \
    ln -s /usr/local/lib/node_modules/npm/bin/npx-cli.js /usr/local/bin/npx && \
    npm install -g npm@latest

# --------------------------------------------------------------
# Configuração de diretórios e permissões completa
# --------------------------------------------------------------
RUN mkdir -p ${APP_DIR} && \
    mkdir -p ${APP_DIR}/storage/logs && \
    mkdir -p ${APP_DIR}/storage/framework/{sessions,views,cache} && \
    mkdir -p ${APP_DIR}/bootstrap/cache && \
    mkdir -p /run && \
    mkdir -p /var/log/nginx && \
    mkdir -p /var/lib/nginx && \
    mkdir -p /var/log/supervisor && \
    mkdir -p /etc/nginx/http.d && \
    # Cria todos os arquivos de log necessários
    touch /var/log/php-fpm.log && \
    touch /var/log/php-fpm-slow.log && \
    touch /var/log/php-fpm-stdout.log && \
    touch /var/log/php-fpm-stderr.log && \
    touch /var/log/nginx-stdout.log && \
    touch /var/log/nginx-stderr.log && \
    touch /var/log/laravel-queue-stdout.log && \
    touch /var/log/laravel-queue-stderr.log && \
    # Configura permissões para todos os logs
    chmod 777 /var/log/*.log && \
    # Configura permissões gerais
    chmod -R 777 /run && \
    chmod -R 777 /var/log && \
    chmod -R 777 /var/lib/nginx && \
    chmod -R 777 /tmp

# Copia configurações
COPY ./.docker/php/php.ini "$PHP_INI_DIR/conf.d/99_extra.ini"
COPY ./.docker/php/php-fpm.conf /usr/local/etc/php-fpm.d/zz-docker.conf
COPY ./.docker/supervisor/supervisord.conf /etc/supervisor/conf.d/supervisord.conf
COPY ./.docker/nginx/default.conf /etc/nginx/http.d/default.conf

WORKDIR $APP_DIR

# --------------------------------------------------------------
# Instala dependências (aproveitando o cache do Docker)
# --------------------------------------------------------------
COPY --chown=www-data:www-data composer.* ./
RUN composer install \
    --no-dev \
    --no-interaction \
    --prefer-dist \
    --optimize-autoloader \
    --no-scripts \
    --no-progress \
    --ignore-platform-reqs \
    --ignore-platform-req=php

COPY --chown=www-data:www-data package*.json ./
RUN npm ci --no-audit --no-fund

# --------------------------------------------------------------
# Copia o código da aplicação
# --------------------------------------------------------------
COPY --chown=www-data:www-data . .

# Compila assets
RUN npm run build

# --------------------------------------------------------------
# Configuração do Laravel após copiar todos os arquivos
# --------------------------------------------------------------
# Garante que o arquivo .env existe antes de gerar a chave
RUN if [ ! -f .env ]; then \
    if [ -f .env.example ]; then \
    cp .env.example .env; \
    else \
    echo "APP_NAME=MerakiShop" > .env && \
    echo "APP_ENV=production" >> .env && \
    echo "APP_DEBUG=false" >> .env && \
    echo "LOG_CHANNEL=errorlog" >> .env; \
    fi; \
    fi

# Agora gera a chave do Laravel (só se não existir APP_KEY)
RUN if ! grep -q "APP_KEY=" .env || grep -q "APP_KEY=$" .env || grep -q "APP_KEY=null" .env; then \
    php artisan key:generate --force; \
    fi

# Teste de configuração do PHP-FPM antes de finalizar
RUN php-fpm -t && \
    echo "PHP-FPM configuration test passed"

# Configura permissões finais
RUN chown -R www-data:www-data ${APP_DIR} && \
    chmod -R 775 ${APP_DIR}/storage && \
    chmod -R 775 ${APP_DIR}/bootstrap/cache && \
    chown -R www-data:www-data /run

# Limpa caches
RUN composer clear-cache && \
    npm cache clean --force

# Expõe a porta 80 para o Nginx
EXPOSE 80

# Inicia Nginx e PHP-FPM via supervisor
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisor/conf.d/supervisord.conf"]
